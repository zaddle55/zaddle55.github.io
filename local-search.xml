<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>生者与死者的牵绊之歌————《はつゆきさくら》浅评</title>
    <link href="/2024/02/19/2/"/>
    <url>/2024/02/19/2/</url>
    
    <content type="html"><![CDATA[<h2 id="1-游戏各方面评价">1. 游戏各方面评价</h2><div class="note note-primary">            <p><strong>画风与立绘</strong> ⭐⭐⭐⭐  画风偏萌系，整体上质量还可以，但一些关键cg与差分有些明显崩坏导致体验不是很好。</p>          </div><div class="note note-primary">            <p><strong>人物设计</strong> ⭐⭐⭐⭐  可攻略角色しろくま、あずま夜在人设上有些公式化，不够立体，不过作为前女友定位的小坂井あや的塑造相当成功，直接提升了游戏的整体观感与あや的两个结局的质量。</p>          </div><div class="note note-primary">            <p><strong>剧情</strong> ⭐⭐⭐⭐⭐⭐  日常方面不算太无聊，时不时有初雪的嘴臭环节算是一大看点；主体故事从节奏编排和伏笔回收上来说都是比较成功的，就是有关Ghost的设定有些模糊，但不算太影响观感。</p>          </div><div class="note note-primary">            <p><strong>声优表现</strong> ⭐⭐⭐  比较平庸，很多剧情爆点都没法达到应有的效果，桐谷华所配音的あずま夜在一众女主角中确实出色但仍感青涩。</p>          </div><div class="note note-primary">            <p><strong>演出</strong> ⭐  近乎没有，需要自己脑补，对声效的使用也算是业界反面教材了。</p>          </div><div class="note note-primary">            <p><strong>音乐</strong> ⭐⭐⭐⭐⭐⭐  主要由水月陵负责，质量自然不必说，很多抒情用曲目可称得上经典；另外主题用音乐比较多，OP Hesitation Snow 和 桜end ED GHOSTxGraduation 可以说非常优质。</p>          </div><h2 id="2-个人感受">2. 个人感受</h2><p>本作作为SAGA PLANET四季系列收尾之作，在气氛渲染上是相当到位的，开篇便是雪夜男主从学校走在回家的路上与女主玉樹桜的相遇，万籁俱寂的夜与倏倏飘下的雪仿佛都在衬托这位孤独的王————河野初雪，这份孤独感在剧情中占了很大的分量，无论是他回到荒废的酒店与らん扯家常（实际上这也是他自己的回忆）还是在学校同学间流传的不良印象，这些无疑是为了铺垫他选择成为GhostChild抛却人世旧情、实现复仇的计划，而这一计划的终局自然也是孤独的。</p><p>在小坂井あや线路（也就是所有线路的前置剧情）这份孤独感得到了解释：两年前，河野初雪在酒店亲眼看到自己最信赖的家人般的角色らん的“灵魂”被木花咲耶夺取，同时自己因众Ghost的劝告失去了长久以来的居所。背负着谜一样的Ghost之子的命运，河野初雪神魂皆失的流浪生活与小坂井姐弟的变故产生了接点，三人的命运线开始纠缠在一起，あきら对狐朋狗友，更是对亲姐姐あや见死不救的举动心存怨恨，化作Ghost实施复仇与骚乱，并因对人世的留恋尝试附身あや；あや对あきら的憧憬和愧疚转而投射到处境相似的河野初雪身上，以此填补缺憾；河野初雪从あや获得了生的勇气，并间接切断了あや与あきら畸形的灵魂共存关系。可以说三人一开始的境地十分相似：失去了灵魂的归宿、不得不直面的苦难与沉重。然而在あや与あきら这一灵魂复合体与初雪的关系深化中，初雪了解了事情的全貌，并决定以绫失去那个冬日的回忆代价亲手用银剑斩去了秋良的灵魂，最终初雪与“重生”的小坂井绫在樱花树下重逢，只是河野初雪只能独自怀揣着这个回忆，与这位前学生会长在新的一页挥墨续写着“Graduation”的故事，听到那一声熟悉的“ゆきち”，相信不仅是初雪，作为玩家的我们心头都会浮起一层怀念的波澜吧。总体上这条线波澜跌宕，恩怨的纠缠与情感刻画比较细腻，结局也可以说很符合新岛夕的风格了，经典的有情人难成眷属，然而最令人惊喜的是这个故事仍未结束，这也让小坂井绫的形象在真结局的展开中再次丰富与升华。<br><img src="https://raw.githubusercontent.com/zaddle55/Picgo/main/images/20240225000444.png" alt="Aya's tale is over."></p><p>“Graduation”不仅是真结局的线路名称，更代表着这个游戏的主题。新岛夕在这个作品里反复地重申这个词语，意味着它的意义不仅仅是学业的结束这么单纯，况且在所有个人路线中毕业典礼的前一天是初雪复仇计划之日，毕业典礼后故事结束，“Graduation”这个概念的重要性不言而喻。我想玉樹桜这一角色代替新岛夕向所有玩家解释了这个疑问。她不仅实现了自己的Graduation，还让男主走向了真正的Graduation。<br><img src="https://raw.githubusercontent.com/zaddle55/Picgo/main/images/20240225000616.png" alt="Ghost Princess"></p><p>Graduation, 这个词，对于玉樹桜来说是消解身上带有的作为GhostPrincess的强大诅咒，也是结束自己以死者的身份徘徊在街区、而始终无法放下对男主的思念的状态；而对河野初雪来说，是放下背负的诅咒与复仇计划，和冬天结识的友人一起迈向未来。新岛夕似乎想传达这样一个观点：执著于过去永远不会有结果，而未来是可以改变的。所以我们看到了あやend2里即便复仇成功也是付出了带绫殉葬的代价；badend里玉樹桜的复仇更是引发了整个街区的时间停滞在严冬。也正所以河野初雪最后作出了作为生者的抉择，跨过了数个寒冬，终于迎来了自己的春天。虽然无法与那些令人怀念的人们相见，但他不会在忘记那些珍贵的回忆，尤其是那个对他来说最特别的存在。</p><p>“―――めぐる春夏秋冬、終わる１０９５日。それは幻のように通り過ぎてしまうのだろうか、ゴーストように消えていくのだろうか。けれど桜のように、未来へ再び花開く予感を残して。”</p><p>“―――交替轮回的春夏秋冬,即将结束的1095日。那或许会如梦似幻一般流逝而过吧,或许会如​Ghos​t一般消逝而去吧。然而,又像樱花那样,留给人一种面向未来,再度绽放的预感。”<br><img src="https://raw.githubusercontent.com/zaddle55/Picgo/main/images/20240225000741.png" alt="Ghost Graduation"></p><p>这是为二人特别献上的毕业相簿的序言，最后我想用这一句为整个观览过程作结：</p><div align="center"><p><em><strong>“卒業おめでとう”</strong></em></p></div>]]></content>
    
    
    <categories>
      
      <category>Galgame评测</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Galgame</tag>
      
      <tag>新岛夕</tag>
      
      <tag>SAGA PLANET</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用Github pages和Hexo-Fluid的主题搭建个人博客指南</title>
    <link href="/2024/01/25/1/"/>
    <url>/2024/01/25/1/</url>
    
    <content type="html"><![CDATA[<h2 id="引言">引言</h2><p>个人博客搭建方式有很多种，而使用现有模板生成静态网页并托管到GitHub提供的github.io服务不仅省去了租用云服务器的成本，也比较简单易上手，本文将介绍在Windows10及以上操作系统上使用经典博客模板Hexo搭建一个属于自己的博客的方法以及后续对其进行主题美化的具体实现操作。</p><h2 id="准备">准备</h2><p>为了完成搭建，请确保你的电脑上已经安装Git、Nodejs并注册了一个GitHub账号，以及一个可以用于连接GitHub的网络代理软件。</p><h3 id="1-Git准备">1. Git准备</h3><p>Git是一个分布式版本控制软件，利用Git可以快速完成后续博客网页的生成和提交。</p><p>Git下载方式如下</p><ol><li>Git官网下载链接为 <a href="https://git-scm.com/downloads">Git</a>，点击“Windows”并选择32位独立版本，如下图。</li></ol><p><img src="https://raw.githubusercontent.com/zaddle55/Picgo/main/images/20240125200137.png?token=AXJGIMYKSMJRMPKIFL534LTFWJG56" alt="Git下载"></p><p>下载完成后运行<code>Git-2.43.0-32-bit.exe</code>,选择合适安装路径。</p><p><img src="https://raw.githubusercontent.com/zaddle55/Picgo/main/images/20240125195931.png?token=AXJGIM5PFDWCVDLL5QW6NBTFWJGWA" alt="选择安装路径"></p><p>勾选必要选项。</p><p><img src="https://raw.githubusercontent.com/zaddle55/Picgo/main/images/20240125200235.png?token=AXJGIM7PLKPDHM4IVQEGWL3FWJHBQ" alt="下载配置"></p><p>之后一路Next，点<code>Install</code>即可</p><p><img src="https://raw.githubusercontent.com/zaddle55/Picgo/main/images/20240125200502.png?token=AXJGIMZDGRU2QRBGQAAC2P3FWJHKW" alt="最后一个页面"></p><p>下载完成后即可发现对文件夹右键，选项中会多出一个<code>Git Bash Here</code>，点击后出现命令行面板即安装成功。</p><p><img src="https://raw.githubusercontent.com/zaddle55/Picgo/main/images/20240125201158.png" alt="Git Bash面板"></p><h3 id="2-Nodejs准备">2. Nodejs准备</h3><!--参考1 https://zhuanlan.zhihu.com/p/105715224--><p>Node.js的使用可以方便的下载和管理搭建所需要的各种包，下载地址为 <a href="https://nodejs.org/en/">nodejs</a>。我们选择左侧的LTS版本进行下载。</p><p><img src="https://raw.githubusercontent.com/zaddle55/Picgo/main/images/20240125201820.png" alt="nodejs下载"></p><p>点击运行安装程序，一路Next即可，图略，安装完成后用以下命令检查是否安装成功。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">node -v<br>npm -v<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/zaddle55/Picgo/main/images/20240125202253.png" alt="cmd检查安装"></p><p>返回当前版本号即说明安装成功。</p><p>接下来需要对npm安装全局模块的路径和环境变量进行设置，否则npm会下载在C盘。</p><p>在下载后的<code>nodejs</code>文件夹下新建两个新文件夹<code>node_cache</code>、<code>node_global</code>。</p><p><img src="https://raw.githubusercontent.com/zaddle55/Picgo/main/images/20240125202951.png" alt="新建目标文件夹"></p><p>打开cmd输入以下命令已更改npm安装配置 (请根据自己电脑上的nodejs路径进行相应修改，下同)。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm config <span class="hljs-built_in">set</span> prefix <span class="hljs-string">&quot;D:\nodejs\node_global&quot;</span><br>npm config <span class="hljs-built_in">set</span> cache <span class="hljs-string">&quot;D:\nodejs\node_cache&quot;</span><br></code></pre></td></tr></table></figure><p>接下来设置环境变量，在环境变量的系统变量中新建<code>NODE_PATH</code>这个变量，值为<code>D:\nodejs\node_global\node_modules</code>。</p><p><img src="https://raw.githubusercontent.com/zaddle55/Picgo/main/images/20240125203513.png" alt="系统变量界面"></p><p><img src="https://raw.githubusercontent.com/zaddle55/Picgo/main/images/20240125203541.png" alt="新建NODE_PATH变量"></p><p>然后更改用户变量<code>Path</code>中相应的npm路径为<code>D:\nodejs\node_global</code>。</p><p><img src="https://raw.githubusercontent.com/zaddle55/Picgo/main/images/20240125203712.png" alt="用户变量界面"></p><p><img src="https://raw.githubusercontent.com/zaddle55/Picgo/main/images/20240125203749.png" alt="编辑Path变量"></p><p>编辑完成后点击确定即可应用。</p><p>在cmd面板中输入<code>npm install -g webpack</code>以测试，</p><p><img src="https://raw.githubusercontent.com/zaddle55/Picgo/main/images/20240125204548.png" alt="cmd测试"></p><p>出现如上反应即成功。</p><h3 id="3-GitHub账号注册">3. GitHub账号注册</h3><p>因为需要使用GitHub Pages服务，必须拥有一个GitHub账号并创建一个Repo。而由于某些存在，GitHub对中国大陆地区有访问限制，请选择合适方式进行访问，GitHub账号注册可采用邮箱注册或Google关联注册，总之验证成功后对个人信息进行相关填写即可。</p><h3 id="4-网络代理软件准备">4. 网络代理软件准备</h3><p>后续Git连接远程储存库需要频繁连接GitHub网站，因此一个合适的网络代理软件必不可少，具体的软件获取与配置不在此赘述，请善用搜索引擎。</p><h2 id="域名注册（可自行选择跳过）">域名注册（可自行选择跳过）</h2><p>域名是用来代替IP地址来访问你的博客的一串字符，为了使你的博客更具有个性，可以考虑采用你喜欢的字段来注册一个域名（不过也可以直接使用<code>www.&lt;你的用户名&gt;.github.io</code>访问 ）。常用的域名注册服务有<a href="https://wanwang.aliyun.com/domain/tld#.com">阿里云</a>、<a href="https://www.godaddy.com/zh-sg">Godaddy</a>等，本文以在阿里云为例展示如何注册域名。</p><p>首先进入阿里云域名服务 <a href="https://wanwang.aliyun.com/domain/tld#.com">https://wanwang.aliyun.com/domain/tld#.com</a> 在搜索框输入你希望使用的字母组合。</p><p><img src="https://raw.githubusercontent.com/zaddle55/Picgo/main/images/20240125210632.png" alt="搜索结果"></p><p>一般以<code>.top</code> <code>.xyz</code> <code>.fun</code>为后缀的域名比较廉价，点击你心仪的域名加入购物车，如果你比较确定该域名不会被别人注册，选择套餐“一年”更划算些，因为在你的域名过期后可再次购买。</p><p>选择后需要创建个人信息模板以便认证，按下图操作即可。</p><p><img src="https://raw.githubusercontent.com/zaddle55/Picgo/main/images/20240125211611.png" alt="创建信息模板"></p><p><img src="https://raw.githubusercontent.com/zaddle55/Picgo/main/images/20240125211703.png" alt="新的模板"></p><p>按要求填入个人信息后<strong>保存</strong>，然后需要进行邮箱验证和实名认证。</p><p><img src="https://raw.githubusercontent.com/zaddle55/Picgo/main/images/20240125211851.png" alt="信息模板管理"></p><p>完成后显示为未认证状态，实际上也可以进行支付，点击<strong>立即购买</strong>后等待几十分钟就认证成功了。</p><p><img src="https://raw.githubusercontent.com/zaddle55/Picgo/main/images/20240125212138.png" alt="购买界面"></p><h2 id="GitHub-Pages配置">GitHub Pages配置</h2><p>GitHub Pages 是一项静态站点托管服务，它直接从 GitHub 上的仓库获取 HTML、CSS 和 JavaScript 文件，通过构建过程运行文件然后发布网站。接下来将展示如何创建一个GitHub Pages。</p><p>转到GitHub上的Repositories页面，创建一个 <strong><a href="http://xn--6qqv7i14ofosyrb.github.io">你的用户名.github.io</a></strong>为名的仓库。</p><p><img src="https://raw.githubusercontent.com/zaddle55/Picgo/main/images/20240125212811.png" alt="创建项目仓库"></p><p>注意一定要勾选<strong>Public</strong>，否则后续发布网站可能会出现问题。</p><p>在仓库界面依次点击<code>Settings</code>-&gt;<code>Pages</code>,出现如下类似界面即创建成功。</p><p><img src="https://raw.githubusercontent.com/zaddle55/Picgo/main/images/20240125213439.png" alt="Pages"></p><h2 id="安装Hexo并连接到远程库">安装Hexo并连接到远程库</h2><h3 id="1-Hexo的部署">1. Hexo的部署</h3><p>首先在合适位置创建一个<code>Blog</code>文件夹，选择后右键<code>Git Bash Here</code>，输入以下命令以下载Hexo</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">npm install -g hexo-cli<br></code></pre></td></tr></table></figure><p>等待安装完成后，输入<code>hexo init</code>以初始化。</p><p><img src="https://raw.githubusercontent.com/zaddle55/Picgo/main/images/20240125214003.png" alt="hexo init"></p><p>输入<code>hexo g</code>以开始静态部署</p><p><img src="https://raw.githubusercontent.com/zaddle55/Picgo/main/images/20240125214101.png" alt="hexo g"></p><p>部署完成后，此时输入<code>hexo s</code>可返回主机地址<code>http://localhost:4000</code>,按住<code>Ctrl</code>并点击可进入网页</p><p><img src="https://raw.githubusercontent.com/zaddle55/Picgo/main/images/20240125214327.png" alt="生成的Hexo博客网页"></p><p>点击<code>Ctrl+C</code>即可结束服务器运行。</p><p>另外，这个<code>http://localhost:4000</code>生成的网页可随本地文件随时更新，因此<strong>适合测试查看博客上的实际效果</strong>。</p><h3 id="2-获取GitHub-SSH-keys">2. 获取GitHub SSH keys</h3><!--参考 https://blog.csdn.net/weixin_42310154/article/details/118340458--><p>Hexo与GitHub的连接需要配置SSH连接，因此需要获取GitHub SSH keys。</p><p>首先检查本地主机是否已存在SSH key，需要在Git Bash面板中输入以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> ~/.ssh<br><span class="hljs-built_in">ls</span><br><span class="hljs-comment"># 看是否存在 id_rsa 和 id_rsa.pub文件，如果存在，说明已经有SSH Key</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/zaddle55/Picgo/main/images/20240125215305.png" alt="Git Bash响应"></p><p>若显示上图，说明其已存在则不需要生成SSH keys。</p><p>如果不存在则输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh-keygen -t rsa -C <span class="hljs-string">&quot;xxx@xxx.com&quot;</span><br></code></pre></td></tr></table></figure><p>生成后再用上一步命令检查。</p><p>然后输入以下命令以获取SSH key公钥内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> ~/.ssh<br><span class="hljs-built_in">cat</span> id_rsa.pub<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/zaddle55/Picgo/main/images/!%5BAlt%20text%5D(image-8.png).png" alt="公钥内容"></p><p>成功后复制下来即可。</p><p>接着进入GitHub账号中的<code>Settings</code>-&gt;<code>SSH and GPG keys</code>-&gt;<code>New SSH key</code>。</p><p><img src="https://raw.githubusercontent.com/zaddle55/Picgo/main/images/20240125220435.png" alt="SSH and GPG keys"></p><p><img src="https://raw.githubusercontent.com/zaddle55/Picgo/main/images/20240125220615.png" alt="New SSH key"></p><p>在此处粘贴进复制的公钥内容即可。</p><p>最后输入以下命令验证是否设置成功</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh -T git@github.com<br></code></pre></td></tr></table></figure><div class="note note-warning">            <p><strong>注意</strong>：如果出现了<code>network error</code>等报错，需要进行SSH网络代理配置</p><p>查看本地文件夹<code>C:\Users\xxx\.ssh</code>是否有config（无后缀名）文件，若没有则创建并写入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs config">Host github.com<br>  User git<br>  Port 22<br>  Hostname github.com<br>  IdentityFile &quot;C:\Users\[替换称自己的名字]\.ssh\id_rsa&quot;<br>  TCPKeepAlive yes<br>  ProxyCommand &quot;C:\Users\[替换称自己的名字]\AppData\Local\Programs\Git\mingw64\bin\connect.exe&quot; -S 127.0.0.1:1080 -a none %h %p<br><br>Host ssh.github.com<br>  User git<br>  Port 443<br>  Hostname ssh.github.com<br>  IdentityFile &quot;C:\Users\[替换称自己的名字]\.ssh\id_rsa&quot;<br>  TCPKeepAlive yes<br>  ProxyCommand &quot;C:\Users\[替换称自己的名字]\AppData\Local\Programs\Git\mingw64\bin\connect.exe&quot; -S 127.0.0.1:1080 -a none %h %p<br></code></pre></td></tr></table></figure>          </div><h3 id="将Hexo部署到GitHub">将Hexo部署到GitHub</h3><p>在<code>Blog</code>文件夹找到<code>_config.yml</code>，并用合适文本编辑软件打开</p><p><img src="https://raw.githubusercontent.com/zaddle55/Picgo/main/images/20240125222315.png" alt="_config.yml文件位置"></p><p>在文档中添加以下内容</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">deploy:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br>  <span class="hljs-attr">repository:</span> <span class="hljs-string">git@github.com:你的github账户名/你的github账户名.github.io.git</span>  <span class="hljs-comment">#你的仓库SSH连接</span><br>  <span class="hljs-attr">branch:</span> <span class="hljs-string">main</span><br></code></pre></td></tr></table></figure><p>接着输入命令安装Git部署插件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install hexo-deployer-git --save<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/zaddle55/Picgo/main/images/20240125222746.png" alt="安装完成显示如上"></p><p>然后输入以下命令以测试部署</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo clean   <span class="hljs-comment">#清除缓存文件 db.json 和已生成的静态文件 public</span><br>hexo g       <span class="hljs-comment">#生成网站静态文件到默认设置的 public 文件夹(hexo generate 的缩写)</span><br>hexo d       <span class="hljs-comment">#自动生成网站静态文件，并部署到设定的仓库(hexo deploy 的缩写)</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/zaddle55/Picgo/main/images/20240125222921.png" alt="部署中"></p><p>完成后输入 <a href="https://xxx.github.xn--io-2p3cn8mzrag54cgpft50cgfi3hl">https://xxx.github.io即可打开你的网站</a>。</p><h2 id="解析域名（不考虑购买域名可自行选择跳过）">解析域名（不考虑购买域名可自行选择跳过）</h2><!--参考 https://zhuanlan.zhihu.com/p/103813944--><p>登录你的阿里云域名控制台，选择你的域名点击添加两条解析记录，填入内容如图所示</p><p><img src="https://raw.githubusercontent.com/zaddle55/Picgo/main/images/20240130203348.png" alt="解析记录"></p><p>IPV4地址用ping命令获取，用<code>Win+R</code>键打开cmd面板输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ping 你的GitHub用户名.github.io<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/zaddle55/Picgo/main/images/20240130203821.png" alt="cmd操作"></p><p>然后打开<code>/Blog/source</code>文件夹，添加<code>CNAME</code>文件（不带后缀名），打开后写入<strong>域名</strong>（不带www.前缀）保存。</p><p><img src="https://raw.githubusercontent.com/zaddle55/Picgo/main/images/20240130204142.png" alt="source文件夹"></p><p><img src="https://raw.githubusercontent.com/zaddle55/Picgo/main/images/20240130204211.png" alt="写入域名"></p><p>回到<code>Blog</code>文件夹右键<code>Git Bash</code>，输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo clean<br>hexo d -g  <span class="hljs-comment"># hexo g 和 hexo d 的组合命令</span><br></code></pre></td></tr></table></figure><p>打开GitHub查看CNAME文件是否已在项目中，点击<code>Settings</code></p><p><img src="https://raw.githubusercontent.com/zaddle55/Picgo/main/images/20240130210016.png" alt="查看CNAME文件"></p><p>查看域名是否自动填入</p><p><img src="https://raw.githubusercontent.com/zaddle55/Picgo/main/images/20240130210128.png" alt="Custom domain"></p><p>刚部署好会进行DNS解析，等待一段时间解析成功可以通过此域名进入你的博客网站。</p><div class="note note-warning">            <p>注意：如果最后DNS解析错误，可以在解析中添加这几条记录：<br>A @ 185.199.108.153<br>A @ 185.199.109.153<br>A @ 185.199.110.153<br>A @ 185.199.111.153</p>          </div><h2 id="进行Fluid主题配置">进行Fluid主题配置</h2><p>使用npm可以直接下载hexo-fliud主题，在<code>/Blog</code>目录下执行</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">npm install --save hexo-theme-fluid<br></code></pre></td></tr></table></figure><p>在博客目录下新建<code>_config.fluid.yml</code>,将<code>/Blog/node_modules/hexo-theme-fluid/_config.yml</code>中的内容复制进去。</p>]]></content>
    
    
    <categories>
      
      <category>经验分享</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>Github</tag>
      
      <tag>Nodejs</tag>
      
      <tag>npm</tag>
      
      <tag>Git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2024/01/20/hello-world/"/>
    <url>/2024/01/20/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start">Quick Start</h2><h3 id="Create-a-new-post">Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server">Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files">Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites">Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
