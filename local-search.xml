<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>基于Minmax算法与Alpha-Beta剪枝的五子棋对战AI的Java代码实现</title>
    <link href="/2024/04/07/GobangAI-md/"/>
    <url>/2024/04/07/GobangAI-md/</url>
    
    <content type="html"><![CDATA[<h2 id="引言">引言</h2><p>五子棋 (GoBang) 是一种典型的<strong>博弈游戏</strong>，而“博弈”一词的定义在《人工智能-一种现代方法》一书中的第五章《对抗搜索》中给出</p><blockquote><p>有完备信息的，确定性的，轮流行动的，两个游戏者的零和游戏.</p></blockquote><p>这种游戏可以通过生成博弈树来对下一步的最优行动进行预测，这也是构建五子棋对战AI的原理，而这种思路是通过 <strong>极小化极大算法(Minimax)</strong> 来实现的，接下来将介绍其原理与代码实现。<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="本文主要参考自该GitHub Issue [javascript gobang AI，JS五子棋AI，源码+教程，基于Alpha-Beta剪枝算法（不是神经网络)](https://github.com/lihongxun945/gobang?tab=readme-ov-file)">[1]</span></a></sup></p><h2 id="极小化极大算法-sup-id-fnref-2-class-footnote-ref-a-href-fn-2-rel-footnote-span-class-hint-top-hint-rounded-aria-label-Minimax算法解释与思路来源-Oi-wiki-https-oi-wiki-org-search-alpha-beta-2-span-a-sup">极小化极大算法<sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><span class="hint--top hint--rounded" aria-label="Minimax算法解释与思路来源 [Oi.wiki](https://oi-wiki.org/search/alpha-beta/)">[2]</span></a></sup></h2><p>将五子棋的每个行动按后续双方可能的行动展开，可得到一个庞大的搜索树，如图所示</p><div align="center">    <img src="https://raw.githubusercontent.com/zaddle55/Picgo/main/images/20240407211255.png" width="520px">    <img src="https://raw.githubusercontent.com/zaddle55/Picgo/main/images/20240407211323.png" width="300px"></div><p>若以AI玩家的某一次落子前的棋盘状态为根节点，第一层(depth==1)子节点即为AI玩家落子后的可能棋盘状态，<br>第二层(depth==2)子节点即为人类玩家下一步落子后的可能棋盘状态……对每个子节点来说，其值(data)即为相对于AI玩家的棋盘状态评分。</p><p>当从根节点开始搜索时，默认两玩家都发挥最佳水平，则需要遵从“AI玩家尽可能选择评分最大的路径，人类玩家尽可能选择评分最小的路径”，这样才能保证下一步的策略更加合理。<br>这就需要对两种层进行区分，在图上，标为MAX的正方形节点意味着要从其子节点中选择评分最大的一个，标MIN的圆形节点要从其子节点选择评分最小的一个。</p><p>对于这种问题，就可以利用深度优先搜索 (DPS) 的思路来逐步构筑代码：初始条件 (递归到最深层节点) 直接返回该节点评分值，当前节点为MAX节点返回子节点最大值，当前节点为MIN节点返回节点最小值，直到回溯至根节点结束。</p><p><img src="https://raw.githubusercontent.com/zaddle55/Picgo/main/images/20240407213716.png" alt="Minimax算法图像化"></p><p>伪代码实现：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs pseudo">int minimax(int depth, bool is_max) &#123;<br>    int res;<br>  if (!son_num[depth]) return val(curState); // 搜索到无子节点返回当前评分<br>  if (is_max) &#123; // 当前为MAX节点，返回子节点最大值<br>    for (int i = 0; i &lt; son_num[depth]; ++i) &#123;<br>      res = max(res, minimax(depth + 1, is_max ^ 1));<br>    &#125;<br>    return res;<br>  &#125; else &#123; // 当前为MIN节点，返回子节点最小值<br>    for (int i = 0; i &lt; son_num[depth]; ++i) &#123;<br>      res = min(res, minimax(depth + 1, is_max ^ 1));<br>    &#125;<br>    return res;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>然而从上面的代码可以看出来，我们需要解决几个问题：</p><ul><li>子节点状态sonState的生成</li><li>节点状态的评估函数evaluate()的实现</li><li>搜索过于庞大，假设每层节点有10个子节点，当搜索深度为4时就会搜索 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>1</mn><msup><mn>0</mn><mn>4</mn></msup><mo>=</mo><mn>10000</mn></mrow><annotation encoding="application/x-tex">10^4 = 10000</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141em;"></span><span class="mord">1</span><span class="mord"><span class="mord">0</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">10000</span></span></span></span>次，每次都要建立一个新的<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>15</mn><mo>×</mo><mn>15</mn></mrow><annotation encoding="application/x-tex">15 \times 15</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.7278em;vertical-align:-0.0833em;"></span><span class="mord">15</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">15</span></span></span></span>大小的二维数组，这个算法的空间复杂度将会达到 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>O</mi><mo stretchy="false">(</mo><msup><mn>2</mn><mi>n</mi></msup><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">O(2^n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6644em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span> ，因此适当的优化(即剪去不必要的分枝)是亟需的</li></ul><h2 id="生成函数generate-的实现">生成函数generate()的实现</h2><p>进行搜索前必须生成每一个节点的棋盘状态，即下一步每一个可能的走法，对于五子棋我们倾向于开局落子在中心位置，且距离棋盘上已有棋子位置的过远处(5个位置以外)的落子并没有太大价值，根据此便可构建generate()方法，伪代码实现如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs pseudo">int[][] generate() &#123;<br>  if (isEmpty(board)) &#123;<br>    return &#123;&#123;7,7&#125;&#125;<br>  &#125;<br>  int[][] res;<br>  for (int i = 0; i &lt; ROW; i++) &#123;<br>    for (int j = 0; j &lt; COL; j++&gt;) &#123;<br>      if (isChessNear) &#123;<br>        res.add(&#123;i, j&#125;)<br>      &#125;<br>     &#125;<br>  &#125;<br>  return res<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="评估函数evaluate-的实现">评估函数evaluate()的实现</h2><h2 id="对DFS的优化——Alpha-Beta剪枝算法-sup-id-fnref-4-class-footnote-ref-a-href-fn-4-rel-footnote-span-class-hint-top-hint-rounded-aria-label-依然参考自-Oi-wiki-https-oi-wiki-org-search-alpha-beta-4-span-a-sup">对DFS的优化——Alpha-Beta剪枝算法<sup id="fnref:4" class="footnote-ref"><a href="#fn:4" rel="footnote"><span class="hint--top hint--rounded" aria-label="依然参考自 [Oi.wiki](https://oi-wiki.org/search/alpha-beta/)">[4]</span></a></sup></h2><p>当搜索树过于复杂且包含极值约束时，可以用Alpha-Beta算法剪去不可能的路径上的分支，现在结合某一局势解释其原理：</p><p><img src="https://raw.githubusercontent.com/zaddle55/Picgo/main/images/20240420161313.png" alt="搜索树及其根节点"></p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>α</mi></mrow><annotation encoding="application/x-tex">\alpha</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal" style="margin-right:0.0037em;">α</span></span></span></span>, <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>β</mi></mrow><annotation encoding="application/x-tex">\beta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.05278em;">β</span></span></span></span> 分别作为搜索过程中结果的最大下界和最小上界的记录值，若已知某节点的部分子节点的分数，虽然不能算出该节点的分数，但可以算出该节点的分数的取值范围。同时，利用该节点的分数的取值范围，在搜索其子节点时，如果已经确定没有更好的走法，就不必再搜索剩余的子节点了。在具体实现时，即 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>α</mi><mi>β</mi></mrow><annotation encoding="application/x-tex">\alpha \beta</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.0037em;">α</span><span class="mord mathnormal" style="margin-right:0.05278em;">β</span></span></span></span> 说明该节点可以剪枝。</p><p><img src="https://raw.githubusercontent.com/zaddle55/Picgo/main/images/20240420162027.png" alt="开始搜索"></p><p>初始时 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>α</mi><mo>=</mo><mo>−</mo><mi mathvariant="normal">∞</mi><mo separator="true">,</mo><mi>β</mi><mo>=</mo><mo>+</mo><mi mathvariant="normal">∞</mi></mrow><annotation encoding="application/x-tex">\alpha = - \infty, \beta = + \infty</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal" style="margin-right:0.0037em;">α</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord">−</span><span class="mord">∞</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.05278em;">β</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6667em;vertical-align:-0.0833em;"></span><span class="mord">+</span><span class="mord">∞</span></span></span></span> ,当搜索至根节点时，由于其父节点为MIN类型，故更新 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>β</mi><mo>=</mo><mn>3</mn></mrow><annotation encoding="application/x-tex">\beta = 3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.05278em;">β</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">3</span></span></span></span>，同时A节点值返回为3。</p><p><img src="https://raw.githubusercontent.com/zaddle55/Picgo/main/images/20240420162423.png" alt="更新α, β值"></p><p>继续向上返回时，由于父节点变为MAX类型，更新 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>α</mi><mo>=</mo><mn>3</mn></mrow><annotation encoding="application/x-tex">\alpha = 3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal" style="margin-right:0.0037em;">α</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">3</span></span></span></span>, 向下搜索至C节点。</p><p><img src="https://raw.githubusercontent.com/zaddle55/Picgo/main/images/20240420162653.png" alt="出现可剪枝节点"></p><p>这时根节点最小值为2，更新 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>β</mi><mo>=</mo><mn>2</mn></mrow><annotation encoding="application/x-tex">\beta = 2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.05278em;">β</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">2</span></span></span></span>, 发现 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>β</mi><mo>&lt;</mo><mi>α</mi></mrow><annotation encoding="application/x-tex">\beta &lt; \alpha</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8889em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.05278em;">β</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal" style="margin-right:0.0037em;">α</span></span></span></span>，说明节点C不会有更好的走法，故不再搜索其子节点并直接返回结果为2。</p><p>将Alpha-beta剪枝加入Minimax搜索中，伪代码实现如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs pseudo">int alpha_beta(int u, int alph, int beta, bool is_max) &#123;<br>  if (!son_num[u]) return val[u];<br>  if (is_max) &#123;<br>    for (int i = 0; i &lt; son_num[u]; ++i) &#123;<br>      int d = son[u][i];<br>      alph = max(alph, alpha_beta(d, alph, beta, is_max ^ 1));<br>      if (alph &gt;= beta) break;<br>    &#125;<br>    return alph;<br>  &#125; else &#123;<br>    for (int i = 0; i &lt; son_num[u]; ++i) &#123;<br>      int d = son[u][i];<br>      beta = min(beta, alpha_beta(d, alph, beta, is_max ^ 1));<br>      if (alph &gt;= beta) break;<br>    &#125;<br>    return beta;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="附">附</h2><p>最后贴上我的Java源码</p>    <div class="fold">      <div class="fold-title fold-info collapsed" data-toggle="collapse" href="#collapse-9c51fa20" role="button" aria-expanded="false" aria-controls="collapse-9c51fa20">        <div class="fold-arrow">▶</div>Board.java      </div>      <div class="fold-collapse collapse" id="collapse-9c51fa20">        <div class="fold-content">          <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.LinkedList;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Board</span> &#123;<br><span class="hljs-comment">// 通过name和id来创建一个棋盘</span><br>    <span class="hljs-keyword">public</span> String name;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> id;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Board</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> id)</span>&#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.id = id;<br>    &#125;<br>    <span class="hljs-comment">// 设置黑棋为1，白棋为2，空为0</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">BLACK</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">WHITE</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">EMPTY</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">INROW</span> <span class="hljs-operator">=</span> <span class="hljs-number">5</span>;<br><br>    <span class="hljs-comment">// 设置棋盘</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span>[][] board = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">15</span>][<span class="hljs-number">15</span>];<br>    <span class="hljs-comment">// 通过一个二维数组来创建一个棋盘</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Board</span><span class="hljs-params">(<span class="hljs-type">int</span>[][] initBoard)</span>&#123;<br>        copyBoard(initBoard, board);<br>    &#125;<br>    <br>    <span class="hljs-comment">// 初始化状态队列</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">Deque</span> <span class="hljs-variable">status</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Deque</span>();<br>    <span class="hljs-comment">// 状态加入队尾</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">pushStatus</span><span class="hljs-params">(<span class="hljs-type">int</span>[][] board)</span>&#123;<br>        <span class="hljs-type">int</span> [][] copy = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">15</span>][<span class="hljs-number">15</span>];<br>        copyBoard(board, copy);<br>        status.pushRear(copy);<br>    &#125;<br>    <span class="hljs-comment">// 状态出队尾</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span>[][] popStatus()&#123;<br>        <span class="hljs-keyword">return</span> status.popRear();<br>    &#125;<br><br>    <span class="hljs-comment">// 获取棋盘</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span>[][] getBoard()&#123;<br>        <span class="hljs-keyword">return</span> board;<br>    &#125;<br>    <span class="hljs-comment">// 判断并进行落子</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">putChess</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y, <span class="hljs-type">int</span> color)</span>&#123;<br>        <span class="hljs-keyword">if</span> (x &gt;=<span class="hljs-number">0</span> &amp;&amp; x &lt; board[<span class="hljs-number">0</span>].length &amp;&amp; y &gt;= <span class="hljs-number">0</span> &amp;&amp; y &lt; board.length &amp;&amp; board[x][y] == EMPTY)&#123;<br>            <span class="hljs-keyword">if</span> (color == <span class="hljs-number">1</span>)&#123;<br>                board[x][y] = BLACK;<br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (color == <span class="hljs-number">2</span>)&#123;<br>                board[x][y] = WHITE;<br>            &#125;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 移除指定位置的棋子</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">removeChess</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span>&#123;<br>        board[x][y] = EMPTY;<br>    &#125;<br><br>    <span class="hljs-comment">// 获取指定位置的棋子</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getChess</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-keyword">if</span> (board[x][y] == BLACK)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;BLACK&quot;</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (board[x][y] == WHITE)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;WHITE&quot;</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;EMPTY&quot;</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 判断棋盘是否已满</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isFull</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">15</span>; i++)&#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">15</span>; j++)&#123;<br>                <span class="hljs-keyword">if</span> (board[i][j] == EMPTY)&#123;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 根据棋面判断是否有一方胜利</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isWin</span><span class="hljs-params">(<span class="hljs-type">int</span> color)</span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">15</span>; i++)&#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">15</span>; j++)&#123;<br>                <span class="hljs-keyword">if</span> (board[i][j] == color)&#123;<br>                    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.judgeWin(i, j) != <span class="hljs-number">0</span>)&#123;<br>                        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-comment">// 根据最后一步判断是否有一方胜利, 1为黑棋胜利，2为白棋胜利，0为未分胜负</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">judgeWin</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.judgeRow(x, y) || <span class="hljs-built_in">this</span>.judgeCol(x, y) || <span class="hljs-built_in">this</span>.judgeLeftDiagonal(x, y) || <span class="hljs-built_in">this</span>.judgeRightDiagonal(x, y))&#123;<br>            <span class="hljs-keyword">if</span> (board[x][y] == BLACK)&#123;<br>                <span class="hljs-keyword">return</span> BLACK;<br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (board[x][y] == WHITE)&#123;<br>                <span class="hljs-keyword">return</span> WHITE;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> EMPTY;<br>    &#125;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    *判断当前列内是否有五子相连</span><br><span class="hljs-comment">    @param x 当前横坐标</span><br><span class="hljs-comment">    @param y 当前纵坐标</span><br><span class="hljs-comment">    @return boolean</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">judgeCol</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span>&#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">color</span> <span class="hljs-operator">=</span> board[x][y];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> x - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--)&#123;<br>            <span class="hljs-keyword">if</span> (board[i][y] == color)&#123;<br>                count++;<br>            &#125;<br>            <span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> x + <span class="hljs-number">1</span>; i &lt; <span class="hljs-number">15</span>; i++)&#123;<br>            <span class="hljs-keyword">if</span> (board[i][y] == color)&#123;<br>                count++;<br>            &#125;<br>            <span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (count &gt;= INROW)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    *判断当前行内是否有五子相连</span><br><span class="hljs-comment">    * @param x 当前横坐标</span><br><span class="hljs-comment">    * @param y 当前纵坐标</span><br><span class="hljs-comment">    * @return boolean</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">judgeRow</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">color</span> <span class="hljs-operator">=</span> board[x][y];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> y - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--) &#123;<br>            <span class="hljs-keyword">if</span> (board[x][i] == color) &#123;<br>                count++;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> y + <span class="hljs-number">1</span>; i &lt; <span class="hljs-number">15</span>; i++) &#123;<br>            <span class="hljs-keyword">if</span> (board[x][i] == color) &#123;<br>                count++;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (count &gt;= INROW) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        *判断当前左斜对角线内是否有五子相连</span><br><span class="hljs-comment">        * @param x 当前横坐标</span><br><span class="hljs-comment">        * @param y 当前纵坐标</span><br><span class="hljs-comment">        * @return boolean</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">judgeLeftDiagonal</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span> &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">color</span> <span class="hljs-operator">=</span> board[x][y];<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> x - <span class="hljs-number">1</span>, j = y - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span> &amp;&amp; j &gt;= <span class="hljs-number">0</span>; i--, j--) &#123;<br>                <span class="hljs-keyword">if</span> (board[i][j] == color) &#123;<br>                    count++;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> x + <span class="hljs-number">1</span>, j = y + <span class="hljs-number">1</span>; i &lt; <span class="hljs-number">15</span> &amp;&amp; j &lt; <span class="hljs-number">15</span>; i++, j++) &#123;<br>                <span class="hljs-keyword">if</span> (board[i][j] == color) &#123;<br>                    count++;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (count &gt;= INROW) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        *判断当前右斜对角线内是否有五子相连</span><br><span class="hljs-comment">        * @param x 当前横坐标</span><br><span class="hljs-comment">        * @param y 当前纵坐标</span><br><span class="hljs-comment">        * @return boolean</span><br><span class="hljs-comment">         */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">judgeRightDiagonal</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">color</span> <span class="hljs-operator">=</span> board[x][y];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> x - <span class="hljs-number">1</span>, j = y + <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span> &amp;&amp; j &lt; <span class="hljs-number">15</span>; i--, j++) &#123;<br>            <span class="hljs-keyword">if</span> (board[i][j] == color) &#123;<br>                count++;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> x + <span class="hljs-number">1</span>, j = y - <span class="hljs-number">1</span>; i &lt; <span class="hljs-number">15</span> &amp;&amp; j &gt;= <span class="hljs-number">0</span>; i++, j--) &#123;<br>            <span class="hljs-keyword">if</span> (board[i][j] == color) &#123;<br>                count++;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (count &gt;= INROW) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 继承LinkedList类，实现双端队列，储存棋盘状态</span><br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Deque</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">LinkedList</span>&lt;<span class="hljs-type">int</span>[][]&gt;&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">pushRear</span><span class="hljs-params">(<span class="hljs-type">int</span>[][] board)</span> &#123;<br>            addLast(board);<br>        &#125;<br>        <span class="hljs-keyword">public</span> <span class="hljs-type">int</span>[][] popRear() &#123;<br>            <span class="hljs-keyword">return</span> removeLast();<br>        &#125;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">pushFront</span><span class="hljs-params">(<span class="hljs-type">int</span>[][] board)</span> &#123;<br>            addFirst(board);<br>        &#125;<br>        <span class="hljs-keyword">public</span> <span class="hljs-type">int</span>[][] popFront() &#123;<br>            <span class="hljs-keyword">return</span> removeFirst();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 复制棋盘防止引用传递</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">copyBoard</span><span class="hljs-params">(<span class="hljs-type">int</span>[][] srcboard, <span class="hljs-type">int</span>[][] dstBoard)</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; srcboard.length; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; srcboard[i].length; j++) &#123;<br>                dstBoard[i][j] = srcboard[i][j];<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 得到当前棋盘的所有合法走法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> List&lt;<span class="hljs-type">int</span>[]&gt; getValidMoves(<span class="hljs-type">int</span>[][] board)&#123;<br>        List&lt;<span class="hljs-type">int</span>[]&gt; resList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;<span class="hljs-type">int</span>[]&gt;();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">15</span>; i++)&#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">15</span>; j++)&#123;<br>                <span class="hljs-keyword">if</span> (board[i][j] == EMPTY &amp;&amp; isAround(board, i, j))&#123;<br>                    resList.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;i, j&#125;);<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> resList;<br>    &#125;<br><br>    <span class="hljs-comment">// 搜索指定点位距离为5范围内是否有棋子</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isAround</span><span class="hljs-params">(<span class="hljs-type">int</span>[][] board, <span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> x - <span class="hljs-number">3</span>; i &lt;= x + <span class="hljs-number">3</span>; i++)&#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> y - <span class="hljs-number">3</span>; j &lt;= y + <span class="hljs-number">3</span>; j++)&#123;<br>                <span class="hljs-keyword">if</span> (i &gt;= <span class="hljs-number">0</span> &amp;&amp; i &lt; <span class="hljs-number">15</span> &amp;&amp; j &gt;= <span class="hljs-number">0</span> &amp;&amp; j &lt; <span class="hljs-number">15</span> &amp;&amp; board[i][j] != EMPTY)&#123;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>        </div>      </div>    </div>    <div class="fold">      <div class="fold-title fold-info collapsed" data-toggle="collapse" href="#collapse-05eef982" role="button" aria-expanded="false" aria-controls="collapse-05eef982">        <div class="fold-arrow">▶</div>CompeteAI.java      </div>      <div class="fold-collapse collapse" id="collapse-05eef982">        <div class="fold-content">          <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.regex.Pattern;<br><span class="hljs-keyword">import</span> java.util.regex.Matcher;<br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CompeteAI</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">ROW</span> <span class="hljs-operator">=</span> <span class="hljs-number">15</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">COL</span> <span class="hljs-operator">=</span> <span class="hljs-number">15</span>;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">MAX_NODE</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">MIN_NODE</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>    <br>    <span class="hljs-comment">// 定义best数组各对象的索引偏移量</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">bestScore</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">bestX</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">bestY</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span>[] miniMaxSearch(<span class="hljs-type">int</span> curDepth, <span class="hljs-type">int</span> depth, <span class="hljs-type">int</span>[][] board, <span class="hljs-type">int</span> alpha, <span class="hljs-type">int</span> beta, <span class="hljs-type">int</span> role) &#123; <span class="hljs-comment">//role == 1 执白棋 || role == 0 执黑棋</span><br><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        * 初始化最佳数组，储存最佳的落子位置与分数</span><br><span class="hljs-comment">        * 0 -&gt; bestScore, 1 -&gt; bestX, 2 -&gt; bestY </span><br><span class="hljs-comment">        */</span> <br>        <span class="hljs-type">int</span>[] best = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">3</span>];<br><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">         * 初始化Board类，用于调用isWin函数</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-type">Board</span> <span class="hljs-variable">Board</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Board</span>(board);<br><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">         * 初始化三个ArrayList，分别用于存储当前局面的所有可能走法(int[][])、走法数组(int[])评估值(int)</span><br><span class="hljs-comment">         */</span><br>        List&lt;<span class="hljs-type">int</span>[][]&gt; childBoardList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;<span class="hljs-type">int</span>[][]&gt;();<br>        List&lt;<span class="hljs-type">int</span>[]&gt; dirList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;<span class="hljs-type">int</span>[]&gt;();<br>        List&lt;Integer&gt; scoreList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Integer&gt;();<br><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">         * 调用generateStep方法，返回该步所有可能的走法</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span>[] step : Board.getValidMoves(Board.getBoard())) &#123;<br>            <span class="hljs-type">Board</span> <span class="hljs-variable">childBoard</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Board</span>(board);<br>            dirList.add(step);<br>            childBoard.putChess(step[<span class="hljs-number">0</span>], step[<span class="hljs-number">1</span>], role + <span class="hljs-number">1</span>);<br>            childBoardList.add(childBoard.getBoard());<br>        &#125;<br><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">         * 当搜索到叶子节点或有一方胜利时，返回评估值</span><br><span class="hljs-comment">         * 评估值为当前局面的分数</span><br><span class="hljs-comment">         * 当正在执行搜索且子节点未被剪枝时，进行Func递归</span><br><span class="hljs-comment">         * curDepth++表示向下层搜索，childBoard表示以该子</span><br><span class="hljs-comment">         * 节点棋盘状态重新迭代，role ^ 1 表示棋色反转</span><br><span class="hljs-comment">         * 同时alpha、beta值向下传递以更新</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-keyword">if</span> (curDepth == depth || Board.isWin((role ^ <span class="hljs-number">1</span>) + <span class="hljs-number">1</span>)) &#123;<br>            best[<span class="hljs-number">0</span>] = evaluate(board, role ^ <span class="hljs-number">1</span>);<br>            <span class="hljs-keyword">return</span> best;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br><br>            <span class="hljs-comment">// 当前节点为MAX节点时</span><br>            <span class="hljs-keyword">if</span> (curDepth % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span>[][] childBoard : childBoardList) &#123;<br>                    <span class="hljs-type">int</span>[] res = miniMaxSearch(curDepth + <span class="hljs-number">1</span>, depth, childBoard, alpha, beta, role ^ <span class="hljs-number">1</span>);<br>                    scoreList.add(res[bestScore]);<br>                    alpha = Math.max(alpha, res[bestScore]);<br>                    <span class="hljs-keyword">if</span> (alpha &gt;= beta) &#123;<br>                        <span class="hljs-keyword">break</span>;<br>                    &#125;<br>                &#125;<br>                <span class="hljs-comment">/*</span><br><span class="hljs-comment">                 * 若深度为0，搜索该最值对应的走法数组</span><br><span class="hljs-comment">                 */</span><br>                <span class="hljs-keyword">if</span> (curDepth == <span class="hljs-number">0</span>) &#123;<br>                    <span class="hljs-type">int</span> <span class="hljs-variable">bestIndex</span> <span class="hljs-operator">=</span> scoreList.indexOf(alpha);<br>                    best[bestX] = dirList.get(bestIndex)[<span class="hljs-number">0</span>];<br>                    best[bestY] = dirList.get(bestIndex)[<span class="hljs-number">1</span>];<br>                &#125;<br>                best[bestScore] = alpha;<br>                <span class="hljs-keyword">return</span> best;<br><br>                <span class="hljs-comment">// 当前节点为MIN节点时</span><br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span>[][] childBoard : childBoardList) &#123;<br>                    <span class="hljs-type">int</span>[] res = miniMaxSearch(curDepth + <span class="hljs-number">1</span>, depth, childBoard, alpha, beta, role ^ <span class="hljs-number">1</span>);<br>                    scoreList.add(res[bestScore]);<br>                    beta = Math.min(beta, res[bestScore]);<br>                    <span class="hljs-keyword">if</span> (alpha &gt;= beta) &#123;<br>                        <span class="hljs-keyword">break</span>;<br>                    &#125;<br>                &#125;<br>                best[bestScore] = beta;<br>                <span class="hljs-keyword">return</span> best;<br>            &#125;<br>        &#125;<br>    &#125;<br><br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@description</span>: 基于role评估该棋面的得分</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> &#123;int[][]&#125; board</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> &#123;int&#125; role</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> &#123;*&#125;</span><br><span class="hljs-comment">     */</span>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">evaluate</span><span class="hljs-params">(<span class="hljs-type">int</span>[][] board, <span class="hljs-type">int</span> role)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; ROW; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; COL; j++) &#123;<br>                <span class="hljs-keyword">if</span> (board[i][j] != <span class="hljs-number">0</span>) &#123;<br>                    value += evaluatePoint(board, i, j, role);<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> value;<br>    &#125;<br><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     * 生成字符串匹配模式</span><br><span class="hljs-comment">     * FIVE为五连，FOUR为活四，RUSH_FOUR为冲四，DEAD_FOUR为死四，THREE为活三，RUSH_THREE为冲三，DEAD_THREE为死三，TWO为活二，DEAD_TWO为死二</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Pattern</span> <span class="hljs-variable">FIVE_BLACK</span> <span class="hljs-operator">=</span> Pattern.compile(<span class="hljs-string">&quot;1&#123;5&#125;&quot;</span>);<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Pattern</span> <span class="hljs-variable">FOUR_BLACK</span> <span class="hljs-operator">=</span> Pattern.compile(<span class="hljs-string">&quot;011110&quot;</span>);<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Pattern</span> <span class="hljs-variable">RUSH_FOUR_BLACK</span> <span class="hljs-operator">=</span> Pattern.compile(<span class="hljs-string">&quot;1(101|011|110)1&quot;</span>);<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Pattern</span> <span class="hljs-variable">DEAD_FOUR_BLACK</span> <span class="hljs-operator">=</span> Pattern.compile(<span class="hljs-string">&quot;01111(2|3)|(2|3)11110&quot;</span>);<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Pattern</span> <span class="hljs-variable">THREE_BLACK</span> <span class="hljs-operator">=</span> Pattern.compile(<span class="hljs-string">&quot;0(1011|1101)0&quot;</span>);<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Pattern</span> <span class="hljs-variable">RUSH_THREE_BLACK</span> <span class="hljs-operator">=</span> Pattern.compile(<span class="hljs-string">&quot;1(100|010|001)1&quot;</span>);<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Pattern</span> <span class="hljs-variable">DEAD_THREE_BLACK</span> <span class="hljs-operator">=</span> Pattern.compile(<span class="hljs-string">&quot;0(1011|1101)(2|3)|(2|3)(1011|1101)0&quot;</span>);<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Pattern</span> <span class="hljs-variable">TWO_BLACK</span> <span class="hljs-operator">=</span> Pattern.compile(<span class="hljs-string">&quot;01010&quot;</span>);<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Pattern</span> <span class="hljs-variable">DEAD_TWO_BLACK</span> <span class="hljs-operator">=</span> Pattern.compile(<span class="hljs-string">&quot;0101(2|3)|(2|3)1010&quot;</span>);<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Pattern[] mBlack = &#123; FIVE_BLACK, FOUR_BLACK, RUSH_FOUR_BLACK, DEAD_FOUR_BLACK, THREE_BLACK,<br>            RUSH_THREE_BLACK, DEAD_THREE_BLACK, TWO_BLACK, DEAD_TWO_BLACK &#125;;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Pattern</span> <span class="hljs-variable">FIVE_WHITE</span> <span class="hljs-operator">=</span> Pattern.compile(<span class="hljs-string">&quot;2&#123;5&#125;&quot;</span>);<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Pattern</span> <span class="hljs-variable">FOUR_WHITE</span> <span class="hljs-operator">=</span> Pattern.compile(<span class="hljs-string">&quot;022220&quot;</span>);<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Pattern</span> <span class="hljs-variable">RUSH_FOUR_WHITE</span> <span class="hljs-operator">=</span> Pattern.compile(<span class="hljs-string">&quot;2(202|022|220)2&quot;</span>);<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Pattern</span> <span class="hljs-variable">DEAD_FOUR_WHITE</span> <span class="hljs-operator">=</span> Pattern.compile(<span class="hljs-string">&quot;02222(1|3)|(1|3)22220&quot;</span>);<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Pattern</span> <span class="hljs-variable">THREE_WHITE</span> <span class="hljs-operator">=</span> Pattern.compile(<span class="hljs-string">&quot;0(2022|2202)0&quot;</span>);<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Pattern</span> <span class="hljs-variable">RUSH_THREE_WHITE</span> <span class="hljs-operator">=</span> Pattern.compile(<span class="hljs-string">&quot;2(200|020|002)2&quot;</span>);<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Pattern</span> <span class="hljs-variable">DEAD_THREE_WHITE</span> <span class="hljs-operator">=</span> Pattern.compile(<span class="hljs-string">&quot;0(2022|2202)(1|3)|(1|3)(2022|2202)0&quot;</span>);<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Pattern</span> <span class="hljs-variable">TWO_WHITE</span> <span class="hljs-operator">=</span> Pattern.compile(<span class="hljs-string">&quot;02020&quot;</span>);<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Pattern</span> <span class="hljs-variable">DEAD_TWO_WHITE</span> <span class="hljs-operator">=</span> Pattern.compile(<span class="hljs-string">&quot;0202(1|3)|(1|3)2020&quot;</span>);<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Pattern[] mWhite = &#123; FIVE_WHITE, FOUR_WHITE, RUSH_FOUR_WHITE, DEAD_FOUR_WHITE, THREE_WHITE,<br>            RUSH_THREE_WHITE, DEAD_THREE_WHITE, TWO_WHITE, DEAD_TWO_WHITE &#125;;<br><br>    <span class="hljs-comment">// 将匹配模式转化为分数</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">pattern2point</span><span class="hljs-params">(Pattern pattern)</span> &#123;<br>        <span class="hljs-keyword">switch</span> (pattern.toString()) &#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;1&#123;5&#125;&quot;</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">100000</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;011110&quot;</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">10000</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;1(101|011|110)1&quot;</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">1000</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;01111(2|3)|(2|3)11110&quot;</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">100</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;0(1011|1101)0&quot;</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">100</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;1(100|010|001)1&quot;</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">10</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;0(1011|1101)(2|3)|(2|3)(1011|1101)0&quot;</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">5</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;01010&quot;</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">5</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;0101(2|3)|(2|3)1010&quot;</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>            <br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;2&#123;5&#125;&quot;</span>:<br>                <span class="hljs-keyword">return</span> - Integer.MAX_VALUE;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;022220&quot;</span>:<br>                <span class="hljs-keyword">return</span> -<span class="hljs-number">100000</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;2(202|022|220)2&quot;</span>:<br>                <span class="hljs-keyword">return</span> -<span class="hljs-number">1000</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;02222(1|3)|(1|3)22220&quot;</span>:<br>                <span class="hljs-keyword">return</span> -<span class="hljs-number">100</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;0(2022|2202)0&quot;</span>:<br>                <span class="hljs-keyword">return</span> -<span class="hljs-number">100</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;2(200|020|002)2&quot;</span>:<br>                <span class="hljs-keyword">return</span> -<span class="hljs-number">10</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;0(2022|2202)(1|3)|(1|3)(2022|2202)0&quot;</span>:<br>                <span class="hljs-keyword">return</span> -<span class="hljs-number">5</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;02020&quot;</span>:<br>                <span class="hljs-keyword">return</span> -<span class="hljs-number">5</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;0202(1|3)|(1|3)2020&quot;</span>:<br>                <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>            <br>            <span class="hljs-keyword">default</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">evaluatePoint</span><span class="hljs-params">(<span class="hljs-type">int</span>[][] board, <span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y, <span class="hljs-type">int</span> role)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">value</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">Board</span> <span class="hljs-variable">Board</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Board</span>(board);<br><br>        <span class="hljs-comment">// 以当前棋色放置棋子</span><br>        Board.putChess(x, y, role + <span class="hljs-number">1</span>);<br>        <br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">         * 搜索以四个方向两端延伸5个位置的棋子(到边界停止)并转化储存为字符串dirROW,dirCOL,dirLeftDiagonal,dirRightDiagonal(1为黑棋，2为白棋，0为空)</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">dirROW</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">dirCOL</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">dirLeftDiagonal</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">dirRightDiagonal</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;<br><br>        <span class="hljs-comment">// 搜索横向</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> x - <span class="hljs-number">5</span>; i &lt; x + <span class="hljs-number">5</span>; i++) &#123;<br>            <span class="hljs-keyword">if</span> (i &gt;= <span class="hljs-number">0</span> &amp;&amp; i &lt; ROW) &#123;<br>                dirROW += board[x][i];<br>            &#125;<br>            <span class="hljs-keyword">else</span>&#123;<br>                dirROW += <span class="hljs-string">&quot;3&quot;</span>;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">// 搜索纵向</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> y - <span class="hljs-number">5</span>; i &lt; y + <span class="hljs-number">5</span>; i++) &#123;<br>            <span class="hljs-keyword">if</span> (i &gt;= <span class="hljs-number">0</span> &amp;&amp; i &lt; COL) &#123;<br>                dirCOL += board[i][y];<br>            &#125;<br>            <span class="hljs-keyword">else</span>&#123;<br>                dirCOL += <span class="hljs-string">&quot;3&quot;</span>;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">// 搜索左斜对角线</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> x - <span class="hljs-number">5</span>, j = y - <span class="hljs-number">5</span>; i &lt; x + <span class="hljs-number">5</span> &amp;&amp; j &lt; y + <span class="hljs-number">5</span>; i++, j++) &#123;<br>            <span class="hljs-keyword">if</span> (i &gt;= <span class="hljs-number">0</span> &amp;&amp; i &lt; ROW &amp;&amp; j &gt;= <span class="hljs-number">0</span> &amp;&amp; j &lt; COL) &#123;<br>                dirLeftDiagonal += board[i][j];<br>            &#125;<br>            <span class="hljs-keyword">else</span>&#123;<br>                dirLeftDiagonal += <span class="hljs-string">&quot;3&quot;</span>;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">// 搜索右斜对角线</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> x - <span class="hljs-number">5</span>, j = y + <span class="hljs-number">5</span>; i &lt; x + <span class="hljs-number">5</span> &amp;&amp; j &gt; y - <span class="hljs-number">5</span>; i++, j--) &#123;<br>            <span class="hljs-keyword">if</span> (i &gt;= <span class="hljs-number">0</span> &amp;&amp; i &lt; ROW &amp;&amp; j &gt;= <span class="hljs-number">0</span> &amp;&amp; j &lt; COL) &#123;<br>                dirRightDiagonal += board[i][j];<br>            &#125;<br>            <span class="hljs-keyword">else</span>&#123;<br>                dirRightDiagonal += <span class="hljs-string">&quot;3&quot;</span>;<br>            &#125;<br>        &#125;<br>        <br>        <span class="hljs-comment">// 创建棋子字符串数组方便遍历</span><br>        String[] dirs = &#123; dirROW, dirCOL, dirLeftDiagonal, dirRightDiagonal &#125;;<br><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">         * 对每一个方向的棋子进行匹配，若匹配成功则返回对应的分数</span><br><span class="hljs-comment">         * 角色相同则返回正分，角色不同则返回负分</span><br><span class="hljs-comment">         * 五连为int最大值，活四为10000，冲四为1000，死四为100，活三为100，冲三为10，死三为5，活二为5，死二为1</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-keyword">for</span> (String dir : dirs) &#123;<br>            <span class="hljs-keyword">for</span> (Pattern pattern : mBlack) &#123;<br>                <span class="hljs-type">Matcher</span> <span class="hljs-variable">matcher</span> <span class="hljs-operator">=</span> pattern.matcher(dir);<br>                <span class="hljs-type">int</span> <span class="hljs-variable">mul</span> <span class="hljs-operator">=</span> (role == <span class="hljs-number">0</span>)? <span class="hljs-number">1</span> : -<span class="hljs-number">1</span>;<br>                <span class="hljs-keyword">while</span> (matcher.find()) &#123;<br>                    value += mul * pattern2point(pattern);<br>                &#125;<br>            &#125;<br>            <br>            <span class="hljs-keyword">for</span> (Pattern pattern : mWhite) &#123;<br>                <span class="hljs-type">Matcher</span> <span class="hljs-variable">matcher</span> <span class="hljs-operator">=</span> pattern.matcher(dir);<br>                <span class="hljs-type">int</span> <span class="hljs-variable">mul</span> <span class="hljs-operator">=</span> (role == <span class="hljs-number">0</span>)? -<span class="hljs-number">1</span> : <span class="hljs-number">1</span>;<br>                <span class="hljs-keyword">while</span> (matcher.find()) &#123;<br>                    value += mul * pattern2point(pattern);<br>                &#125;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> value;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">copyBoard</span><span class="hljs-params">(<span class="hljs-type">int</span>[][] board, <span class="hljs-type">int</span>[][] newBoard)</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; ROW; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; COL; j++) &#123;<br>                newBoard[i][j] = board[i][j];<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>        </div>      </div>    </div><!-------------------------Ref-------------------------><!--https://blog.csdn.net/weixin_42165981/article/details/103263211--><!--https://oi-wiki.org/search/alpha-beta/--><!--https://github.com/lihongxun945/gobang?tab=readme-ov-file--><section class="footnotes"><h2>参考</h2><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span>本文主要参考自该GitHub Issue <a href="https://github.com/lihongxun945/gobang?tab=readme-ov-file">javascript gobang AI，JS五子棋AI，源码+教程，基于Alpha-Beta剪枝算法（不是神经网络)</a><p><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span>Minimax算法解释与思路来源 <a href="https://oi-wiki.org/search/alpha-beta/">Oi.wiki</a> ↩</a></span></span></li><li><span id="fn:4" class="footnote-text"><span>依然参考自 <a href="https://oi-wiki.org/search/alpha-beta/">Oi.wiki</a><br><a href="#fnref:4" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section></p>]]></content>
    
    
    <categories>
      
      <category>算法拾遗</category>
      
    </categories>
    
    
    <tags>
      
      <tag>深度优先搜索</tag>
      
      <tag>Alpha-Beta剪枝</tag>
      
      <tag>Java</tag>
      
      <tag>博弈论</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>本博客已部署Waline评论服务</title>
    <link href="/2024/03/31/post/"/>
    <url>/2024/03/31/post/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>公告</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>生者与死者的牵绊之歌————《はつゆきさくら》浅评</title>
    <link href="/2024/02/19/2/"/>
    <url>/2024/02/19/2/</url>
    
    <content type="html"><![CDATA[<h2 id="1-游戏各方面评价">1. 游戏各方面评价</h2><div class="note note-primary">            <p><strong>画风与立绘</strong> ⭐⭐⭐⭐  画风偏萌系，整体上质量还可以，但一些关键cg与差分有些明显崩坏导致体验不是很好。</p>          </div><div class="note note-primary">            <p><strong>人物设计</strong> ⭐⭐⭐⭐  可攻略角色しろくま、あずま夜在人设上有些公式化，不够立体，不过作为前女友定位的小坂井あや的塑造相当成功，直接提升了游戏的整体观感与あや的两个结局的质量。</p>          </div><div class="note note-primary">            <p><strong>剧情</strong> ⭐⭐⭐⭐⭐⭐  日常方面不算太无聊，时不时有初雪的嘴臭环节算是一大看点；主体故事从节奏编排和伏笔回收上来说都是比较成功的，就是有关Ghost的设定有些模糊，但不算太影响观感。</p>          </div><div class="note note-primary">            <p><strong>声优表现</strong> ⭐⭐⭐  比较平庸，很多剧情爆点都没法达到应有的效果，桐谷华所配音的あずま夜在一众女主角中确实出色但仍感青涩。</p>          </div><div class="note note-primary">            <p><strong>演出</strong> ⭐  近乎没有，需要自己脑补，对声效的使用也算是业界反面教材了。</p>          </div><div class="note note-primary">            <p><strong>音乐</strong> ⭐⭐⭐⭐⭐⭐  主要由水月陵负责，质量自然不必说，很多抒情用曲目可称得上经典；另外主题用音乐比较多，OP Hesitation Snow 和 桜end ED GHOSTxGraduation 可以说非常优质。</p>          </div><h2 id="2-个人感受">2. 个人感受</h2><p>本作作为SAGA PLANET四季系列收尾之作，在气氛渲染上是相当到位的，开篇便是雪夜男主从学校走在回家的路上与女主玉樹桜的相遇，万籁俱寂的夜与倏倏飘下的雪仿佛都在衬托这位孤独的王————河野初雪，这份孤独感在剧情中占了很大的分量，无论是他回到荒废的酒店与らん扯家常（实际上这也是他自己的回忆）还是在学校同学间流传的不良印象，这些无疑是为了铺垫他选择成为GhostChild抛却人世旧情、实现复仇的计划，而这一计划的终局自然也是孤独的。</p><p>在小坂井あや线路（也就是所有线路的前置剧情）这份孤独感得到了解释：两年前，河野初雪在酒店亲眼看到自己最信赖的家人般的角色らん的“灵魂”被木花咲耶夺取，同时自己因众Ghost的劝告失去了长久以来的居所。背负着谜一样的Ghost之子的命运，河野初雪神魂皆失的流浪生活与小坂井姐弟的变故产生了接点，三人的命运线开始纠缠在一起，あきら对狐朋狗友，更是对亲姐姐あや见死不救的举动心存怨恨，化作Ghost实施复仇与骚乱，并因对人世的留恋尝试附身あや；あや对あきら的憧憬和愧疚转而投射到处境相似的河野初雪身上，以此填补缺憾；河野初雪从あや获得了生的勇气，并间接切断了あや与あきら畸形的灵魂共存关系。可以说三人一开始的境地十分相似：失去了灵魂的归宿、不得不直面的苦难与沉重。然而在あや与あきら这一灵魂复合体与初雪的关系深化中，初雪了解了事情的全貌，并决定以绫失去那个冬日的回忆代价亲手用银剑斩去了秋良的灵魂，最终初雪与“重生”的小坂井绫在樱花树下重逢，只是河野初雪只能独自怀揣着这个回忆，与这位前学生会长在新的一页挥墨续写着“Graduation”的故事，听到那一声熟悉的“ゆきち”，相信不仅是初雪，作为玩家的我们心头都会浮起一层怀念的波澜吧。总体上这条线波澜跌宕，恩怨的纠缠与情感刻画比较细腻，结局也可以说很符合新岛夕的风格了，经典的有情人难成眷属，然而最令人惊喜的是这个故事仍未结束，这也让小坂井绫的形象在真结局的展开中再次丰富与升华。<br><img src="https://raw.githubusercontent.com/zaddle55/Picgo/main/images/20240225000444.png" alt="Aya's tale is over."></p><p>“Graduation”不仅是真结局的线路名称，更代表着这个游戏的主题。新岛夕在这个作品里反复地重申这个词语，意味着它的意义不仅仅是学业的结束这么单纯，况且在所有个人路线中毕业典礼的前一天是初雪复仇计划之日，毕业典礼后故事结束，“Graduation”这个概念的重要性不言而喻。我想玉樹桜这一角色代替新岛夕向所有玩家解释了这个疑问。她不仅实现了自己的Graduation，还让男主走向了真正的Graduation。<br><img src="https://raw.githubusercontent.com/zaddle55/Picgo/main/images/20240225000616.png" alt="Ghost Princess"></p><p>Graduation, 这个词，对于玉樹桜来说是消解身上带有的作为GhostPrincess的强大诅咒，也是结束自己以死者的身份徘徊在街区、而始终无法放下对男主的思念的状态；而对河野初雪来说，是放下背负的诅咒与复仇计划，和冬天结识的友人一起迈向未来。新岛夕似乎想传达这样一个观点：执著于过去永远不会有结果，而未来是可以改变的。所以我们看到了あやend2里即便复仇成功也是付出了带绫殉葬的代价；badend里玉樹桜的复仇更是引发了整个街区的时间停滞在严冬。也正所以河野初雪最后作出了作为生者的抉择，跨过了数个寒冬，终于迎来了自己的春天。虽然无法与那些令人怀念的人们相见，但他不会在忘记那些珍贵的回忆，尤其是那个对他来说最特别的存在。</p><p>“―――めぐる春夏秋冬、終わる１０９５日。それは幻のように通り過ぎてしまうのだろうか、ゴーストように消えていくのだろうか。けれど桜のように、未来へ再び花開く予感を残して。”</p><p>“―――交替轮回的春夏秋冬,即将结束的1095日。那或许会如梦似幻一般流逝而过吧,或许会如​Ghos​t一般消逝而去吧。然而,又像樱花那样,留给人一种面向未来,再度绽放的预感。”<br><img src="https://raw.githubusercontent.com/zaddle55/Picgo/main/images/20240225000741.png" alt="Ghost Graduation"></p><p>这是为二人特别献上的毕业相簿的序言，最后我想用这一句为整个观览过程作结：</p><div align="center"><p><em><strong>“卒業おめでとう”</strong></em></p></div>]]></content>
    
    
    <categories>
      
      <category>Galgame评测</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Galgame</tag>
      
      <tag>新岛夕</tag>
      
      <tag>SAGA PLANET</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用Github pages和Hexo-Fluid的主题搭建个人博客指南</title>
    <link href="/2024/01/25/1/"/>
    <url>/2024/01/25/1/</url>
    
    <content type="html"><![CDATA[<h2 id="引言">引言</h2><p>个人博客搭建方式有很多种，而使用现有模板生成静态网页并托管到GitHub提供的github.io服务不仅省去了租用云服务器的成本，也比较简单易上手，本文将介绍在Windows10及以上操作系统上使用经典博客模板Hexo搭建一个属于自己的博客的方法以及后续对其进行主题美化的具体实现操作。</p><h2 id="准备">准备</h2><p>为了完成搭建，请确保你的电脑上已经安装Git、Nodejs并注册了一个GitHub账号，以及一个可以用于连接GitHub的网络代理软件。</p><h3 id="1-Git准备">1. Git准备</h3><p>Git是一个分布式版本控制软件，利用Git可以快速完成后续博客网页的生成和提交。</p><p>Git下载方式如下</p><ol><li>Git官网下载链接为 <a href="https://git-scm.com/downloads">Git</a>，点击“Windows”并选择32位独立版本，如下图。</li></ol><p><img src="https://raw.githubusercontent.com/zaddle55/Picgo/main/images/20240125200137.png?token=AXJGIMYKSMJRMPKIFL534LTFWJG56" alt="Git下载"></p><p>下载完成后运行<code>Git-2.43.0-32-bit.exe</code>,选择合适安装路径。</p><p><img src="https://raw.githubusercontent.com/zaddle55/Picgo/main/images/20240125195931.png?token=AXJGIM5PFDWCVDLL5QW6NBTFWJGWA" alt="选择安装路径"></p><p>勾选必要选项。</p><p><img src="https://raw.githubusercontent.com/zaddle55/Picgo/main/images/20240125200235.png?token=AXJGIM7PLKPDHM4IVQEGWL3FWJHBQ" alt="下载配置"></p><p>之后一路Next，点<code>Install</code>即可</p><p><img src="https://raw.githubusercontent.com/zaddle55/Picgo/main/images/20240125200502.png?token=AXJGIMZDGRU2QRBGQAAC2P3FWJHKW" alt="最后一个页面"></p><p>下载完成后即可发现对文件夹右键，选项中会多出一个<code>Git Bash Here</code>，点击后出现命令行面板即安装成功。</p><p><img src="https://raw.githubusercontent.com/zaddle55/Picgo/main/images/20240125201158.png" alt="Git Bash面板"></p><h3 id="2-Nodejs准备">2. Nodejs准备</h3><!--参考1 https://zhuanlan.zhihu.com/p/105715224--><p>Node.js的使用可以方便的下载和管理搭建所需要的各种包，下载地址为 <a href="https://nodejs.org/en/">nodejs</a>。我们选择左侧的LTS版本进行下载。</p><p><img src="https://raw.githubusercontent.com/zaddle55/Picgo/main/images/20240125201820.png" alt="nodejs下载"></p><p>点击运行安装程序，一路Next即可，图略，安装完成后用以下命令检查是否安装成功。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">node -v<br>npm -v<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/zaddle55/Picgo/main/images/20240125202253.png" alt="cmd检查安装"></p><p>返回当前版本号即说明安装成功。</p><p>接下来需要对npm安装全局模块的路径和环境变量进行设置，否则npm会下载在C盘。</p><p>在下载后的<code>nodejs</code>文件夹下新建两个新文件夹<code>node_cache</code>、<code>node_global</code>。</p><p><img src="https://raw.githubusercontent.com/zaddle55/Picgo/main/images/20240125202951.png" alt="新建目标文件夹"></p><p>打开cmd输入以下命令已更改npm安装配置 (请根据自己电脑上的nodejs路径进行相应修改，下同)。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm config <span class="hljs-built_in">set</span> prefix <span class="hljs-string">&quot;D:\nodejs\node_global&quot;</span><br>npm config <span class="hljs-built_in">set</span> cache <span class="hljs-string">&quot;D:\nodejs\node_cache&quot;</span><br></code></pre></td></tr></table></figure><p>接下来设置环境变量，在环境变量的系统变量中新建<code>NODE_PATH</code>这个变量，值为<code>D:\nodejs\node_global\node_modules</code>。</p><p><img src="https://raw.githubusercontent.com/zaddle55/Picgo/main/images/20240125203513.png" alt="系统变量界面"></p><p><img src="https://raw.githubusercontent.com/zaddle55/Picgo/main/images/20240125203541.png" alt="新建NODE_PATH变量"></p><p>然后更改用户变量<code>Path</code>中相应的npm路径为<code>D:\nodejs\node_global</code>。</p><p><img src="https://raw.githubusercontent.com/zaddle55/Picgo/main/images/20240125203712.png" alt="用户变量界面"></p><p><img src="https://raw.githubusercontent.com/zaddle55/Picgo/main/images/20240125203749.png" alt="编辑Path变量"></p><p>编辑完成后点击确定即可应用。</p><p>在cmd面板中输入<code>npm install -g webpack</code>以测试，</p><p><img src="https://raw.githubusercontent.com/zaddle55/Picgo/main/images/20240125204548.png" alt="cmd测试"></p><p>出现如上反应即成功。</p><h3 id="3-GitHub账号注册">3. GitHub账号注册</h3><p>因为需要使用GitHub Pages服务，必须拥有一个GitHub账号并创建一个Repo。而由于某些存在，GitHub对中国大陆地区有访问限制，请选择合适方式进行访问，GitHub账号注册可采用邮箱注册或Google关联注册，总之验证成功后对个人信息进行相关填写即可。</p><h3 id="4-网络代理软件准备">4. 网络代理软件准备</h3><p>后续Git连接远程储存库需要频繁连接GitHub网站，因此一个合适的网络代理软件必不可少，具体的软件获取与配置不在此赘述，请善用搜索引擎。</p><h2 id="域名注册（可自行选择跳过）">域名注册（可自行选择跳过）</h2><p>域名是用来代替IP地址来访问你的博客的一串字符，为了使你的博客更具有个性，可以考虑采用你喜欢的字段来注册一个域名（不过也可以直接使用<code>www.&lt;你的用户名&gt;.github.io</code>访问 ）。常用的域名注册服务有<a href="https://wanwang.aliyun.com/domain/tld#.com">阿里云</a>、<a href="https://www.godaddy.com/zh-sg">Godaddy</a>等，本文以在阿里云为例展示如何注册域名。</p><p>首先进入阿里云域名服务 <a href="https://wanwang.aliyun.com/domain/tld#.com">https://wanwang.aliyun.com/domain/tld#.com</a> 在搜索框输入你希望使用的字母组合。</p><p><img src="https://raw.githubusercontent.com/zaddle55/Picgo/main/images/20240125210632.png" alt="搜索结果"></p><p>一般以<code>.top</code> <code>.xyz</code> <code>.fun</code>为后缀的域名比较廉价，点击你心仪的域名加入购物车，如果你比较确定该域名不会被别人注册，选择套餐“一年”更划算些，因为在你的域名过期后可再次购买。</p><p>选择后需要创建个人信息模板以便认证，按下图操作即可。</p><p><img src="https://raw.githubusercontent.com/zaddle55/Picgo/main/images/20240125211611.png" alt="创建信息模板"></p><p><img src="https://raw.githubusercontent.com/zaddle55/Picgo/main/images/20240125211703.png" alt="新的模板"></p><p>按要求填入个人信息后<strong>保存</strong>，然后需要进行邮箱验证和实名认证。</p><p><img src="https://raw.githubusercontent.com/zaddle55/Picgo/main/images/20240125211851.png" alt="信息模板管理"></p><p>完成后显示为未认证状态，实际上也可以进行支付，点击<strong>立即购买</strong>后等待几十分钟就认证成功了。</p><p><img src="https://raw.githubusercontent.com/zaddle55/Picgo/main/images/20240125212138.png" alt="购买界面"></p><h2 id="GitHub-Pages配置">GitHub Pages配置</h2><p>GitHub Pages 是一项静态站点托管服务，它直接从 GitHub 上的仓库获取 HTML、CSS 和 JavaScript 文件，通过构建过程运行文件然后发布网站。接下来将展示如何创建一个GitHub Pages。</p><p>转到GitHub上的Repositories页面，创建一个 <strong><a href="http://xn--6qqv7i14ofosyrb.github.io">你的用户名.github.io</a></strong>为名的仓库。</p><p><img src="https://raw.githubusercontent.com/zaddle55/Picgo/main/images/20240125212811.png" alt="创建项目仓库"></p><p>注意一定要勾选<strong>Public</strong>，否则后续发布网站可能会出现问题。</p><p>在仓库界面依次点击<code>Settings</code>-&gt;<code>Pages</code>,出现如下类似界面即创建成功。</p><p><img src="https://raw.githubusercontent.com/zaddle55/Picgo/main/images/20240125213439.png" alt="Pages"></p><h2 id="安装Hexo并连接到远程库">安装Hexo并连接到远程库</h2><h3 id="1-Hexo的部署">1. Hexo的部署</h3><p>首先在合适位置创建一个<code>Blog</code>文件夹，选择后右键<code>Git Bash Here</code>，输入以下命令以下载Hexo</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Bash">npm install -g hexo-cli<br></code></pre></td></tr></table></figure><p>等待安装完成后，输入<code>hexo init</code>以初始化。</p><p><img src="https://raw.githubusercontent.com/zaddle55/Picgo/main/images/20240125214003.png" alt="hexo init"></p><p>输入<code>hexo g</code>以开始静态部署</p><p><img src="https://raw.githubusercontent.com/zaddle55/Picgo/main/images/20240125214101.png" alt="hexo g"></p><p>部署完成后，此时输入<code>hexo s</code>可返回主机地址<code>http://localhost:4000</code>,按住<code>Ctrl</code>并点击可进入网页</p><p><img src="https://raw.githubusercontent.com/zaddle55/Picgo/main/images/20240125214327.png" alt="生成的Hexo博客网页"></p><p>点击<code>Ctrl+C</code>即可结束服务器运行。</p><p>另外，这个<code>http://localhost:4000</code>生成的网页可随本地文件随时更新，因此<strong>适合测试查看博客上的实际效果</strong>。</p><h3 id="2-获取GitHub-SSH-keys">2. 获取GitHub SSH keys</h3><!--参考 https://blog.csdn.net/weixin_42310154/article/details/118340458--><p>Hexo与GitHub的连接需要配置SSH连接，因此需要获取GitHub SSH keys。</p><p>首先检查本地主机是否已存在SSH key，需要在Git Bash面板中输入以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> ~/.ssh<br><span class="hljs-built_in">ls</span><br><span class="hljs-comment"># 看是否存在 id_rsa 和 id_rsa.pub文件，如果存在，说明已经有SSH Key</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/zaddle55/Picgo/main/images/20240125215305.png" alt="Git Bash响应"></p><p>若显示上图，说明其已存在则不需要生成SSH keys。</p><p>如果不存在则输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh-keygen -t rsa -C <span class="hljs-string">&quot;xxx@xxx.com&quot;</span><br></code></pre></td></tr></table></figure><p>生成后再用上一步命令检查。</p><p>然后输入以下命令以获取SSH key公钥内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> ~/.ssh<br><span class="hljs-built_in">cat</span> id_rsa.pub<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/zaddle55/Picgo/main/images/!%5BAlt%20text%5D(image-8.png).png" alt="公钥内容"></p><p>成功后复制下来即可。</p><p>接着进入GitHub账号中的<code>Settings</code>-&gt;<code>SSH and GPG keys</code>-&gt;<code>New SSH key</code>。</p><p><img src="https://raw.githubusercontent.com/zaddle55/Picgo/main/images/20240125220435.png" alt="SSH and GPG keys"></p><p><img src="https://raw.githubusercontent.com/zaddle55/Picgo/main/images/20240125220615.png" alt="New SSH key"></p><p>在此处粘贴进复制的公钥内容即可。</p><p>最后输入以下命令验证是否设置成功</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh -T git@github.com<br></code></pre></td></tr></table></figure><div class="note note-warning">            <p><strong>注意</strong>：如果出现了<code>network error</code>等报错，需要进行SSH网络代理配置</p><p>查看本地文件夹<code>C:\Users\xxx\.ssh</code>是否有config（无后缀名）文件，若没有则创建并写入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs config">Host github.com<br>  User git<br>  Port 22<br>  Hostname github.com<br>  IdentityFile &quot;C:\Users\[替换称自己的名字]\.ssh\id_rsa&quot;<br>  TCPKeepAlive yes<br>  ProxyCommand &quot;C:\Users\[替换称自己的名字]\AppData\Local\Programs\Git\mingw64\bin\connect.exe&quot; -S 127.0.0.1:1080 -a none %h %p<br><br>Host ssh.github.com<br>  User git<br>  Port 443<br>  Hostname ssh.github.com<br>  IdentityFile &quot;C:\Users\[替换称自己的名字]\.ssh\id_rsa&quot;<br>  TCPKeepAlive yes<br>  ProxyCommand &quot;C:\Users\[替换称自己的名字]\AppData\Local\Programs\Git\mingw64\bin\connect.exe&quot; -S 127.0.0.1:1080 -a none %h %p<br></code></pre></td></tr></table></figure>          </div><h3 id="将Hexo部署到GitHub">将Hexo部署到GitHub</h3><p>在<code>Blog</code>文件夹找到<code>_config.yml</code>，并用合适文本编辑软件打开</p><p><img src="https://raw.githubusercontent.com/zaddle55/Picgo/main/images/20240125222315.png" alt="_config.yml文件位置"></p><p>在文档中添加以下内容</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-attr">deploy:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br>  <span class="hljs-attr">repository:</span> <span class="hljs-string">git@github.com:你的github账户名/你的github账户名.github.io.git</span>  <span class="hljs-comment">#你的仓库SSH连接</span><br>  <span class="hljs-attr">branch:</span> <span class="hljs-string">main</span><br></code></pre></td></tr></table></figure><p>接着输入命令安装Git部署插件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install hexo-deployer-git --save<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/zaddle55/Picgo/main/images/20240125222746.png" alt="安装完成显示如上"></p><p>然后输入以下命令以测试部署</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo clean   <span class="hljs-comment">#清除缓存文件 db.json 和已生成的静态文件 public</span><br>hexo g       <span class="hljs-comment">#生成网站静态文件到默认设置的 public 文件夹(hexo generate 的缩写)</span><br>hexo d       <span class="hljs-comment">#自动生成网站静态文件，并部署到设定的仓库(hexo deploy 的缩写)</span><br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/zaddle55/Picgo/main/images/20240125222921.png" alt="部署中"></p><p>完成后输入 <a href="https://xxx.github.xn--io-2p3cn8mzrag54cgpft50cgfi3hl">https://xxx.github.io即可打开你的网站</a>。</p><h2 id="解析域名（不考虑购买域名可自行选择跳过）">解析域名（不考虑购买域名可自行选择跳过）</h2><!--参考 https://zhuanlan.zhihu.com/p/103813944--><p>登录你的阿里云域名控制台，选择你的域名点击添加两条解析记录，填入内容如图所示</p><p><img src="https://raw.githubusercontent.com/zaddle55/Picgo/main/images/20240130203348.png" alt="解析记录"></p><p>IPV4地址用ping命令获取，用<code>Win+R</code>键打开cmd面板输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ping 你的GitHub用户名.github.io<br></code></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/zaddle55/Picgo/main/images/20240130203821.png" alt="cmd操作"></p><p>然后打开<code>/Blog/source</code>文件夹，添加<code>CNAME</code>文件（不带后缀名），打开后写入<strong>域名</strong>（不带www.前缀）保存。</p><p><img src="https://raw.githubusercontent.com/zaddle55/Picgo/main/images/20240130204142.png" alt="source文件夹"></p><p><img src="https://raw.githubusercontent.com/zaddle55/Picgo/main/images/20240130204211.png" alt="写入域名"></p><p>回到<code>Blog</code>文件夹右键<code>Git Bash</code>，输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo clean<br>hexo d -g  <span class="hljs-comment"># hexo g 和 hexo d 的组合命令</span><br></code></pre></td></tr></table></figure><p>打开GitHub查看CNAME文件是否已在项目中，点击<code>Settings</code></p><p><img src="https://raw.githubusercontent.com/zaddle55/Picgo/main/images/20240130210016.png" alt="查看CNAME文件"></p><p>查看域名是否自动填入</p><p><img src="https://raw.githubusercontent.com/zaddle55/Picgo/main/images/20240130210128.png" alt="Custom domain"></p><p>刚部署好会进行DNS解析，等待一段时间解析成功可以通过此域名进入你的博客网站。</p><div class="note note-warning">            <p>注意：如果最后DNS解析错误，可以在解析中添加这几条记录：<br>A @ 185.199.108.153<br>A @ 185.199.109.153<br>A @ 185.199.110.153<br>A @ 185.199.111.153</p>          </div><h2 id="进行Fluid主题配置">进行Fluid主题配置</h2><p>使用npm可以直接下载hexo-fliud主题，在<code>/Blog</code>目录下执行</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">npm install --save hexo-theme-fluid<br></code></pre></td></tr></table></figure><p>在博客目录下新建<code>_config.fluid.yml</code>,将<code>/Blog/node_modules/hexo-theme-fluid/_config.yml</code>中的内容复制进去。</p>]]></content>
    
    
    <categories>
      
      <category>经验分享</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>Github</tag>
      
      <tag>Nodejs</tag>
      
      <tag>npm</tag>
      
      <tag>Git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2024/01/20/hello-world/"/>
    <url>/2024/01/20/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start">Quick Start</h2><h3 id="Create-a-new-post">Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server">Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files">Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites">Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
